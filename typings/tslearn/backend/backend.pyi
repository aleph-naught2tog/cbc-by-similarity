"""
This type stub file was generated by pyright.
"""

"""The generic backend."""
def instantiate_backend(*args): # -> Backend:
    """Select backend.

    Parameter
    ---------
    *args : Input arguments can be Backend instance or string or array or None
        Arguments used to define the backend instance.

    Returns
    -------
    backend : Backend instance
        The backend instance.
    """
    ...

def select_backend(data): # -> PyTorchBackend | NumPyBackend:
    """Select backend.

    Parameter
    ---------
    data : array-like or string or None
        Indicates the backend to choose.
        Optional, default equals None.

    Returns
    -------
    backend : class
        The backend class.
        If data is a Numpy array or data equals 'numpy' or data is None,
        backend equals NumpyBackend().
        If data is a PyTorch array or data equals 'pytorch',
        backend equals PytorchBackend().
    """
    ...

class Backend:
    """Class for the  backend.

    Parameter
    ---------
    data : array-like or string or None
        Indicates the backend to choose.
        If data is a Numpy array or data equals 'numpy' or data is None,
        self.backend is set to NumpyBackend().
        If data is a PyTorch array or data equals 'pytorch',
        self.backend is set to PytorchBackend().
        Optional, default equals None.
    """
    def __init__(self, data=...) -> None:
        ...
    
    def get_backend(self): # -> PyTorchBackend | NumPyBackend:
        ...
    
    def set_backend(self, data=...): # -> None:
        ...
    


def cast(data, array_type=...):
    """Cast data to list or specific backend.

    Parameters
    ----------
    data: array-like,
        The input data should be a list or numpy array or torch array.
        The data to cast.
    array_type: string
        The type to cast the data. It can be "numpy", "pytorch" or "list".

    Returns
    --------
    data_cast: array-like
        Data cast to array_type.
    """
    ...

