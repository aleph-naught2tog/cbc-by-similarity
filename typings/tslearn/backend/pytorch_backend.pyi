"""
This type stub file was generated by pyright.
"""

"""The PyTorch backend.

Several backend functions are inspired from a python package about Machine Learning
in Riemannian manifolds named geomstats [JMLR:v21:19-027], also implementing several backends.

References
----------------
[JMLR:v21:19-027] Nina Miolane, Nicolas Guigui, Alice Le Brigant, Johan Mathe,
Benjamin Hou, Yann Thanwerdas, Stefan Heyder, Olivier Peltre, Niklas Koep, Hadi Zaatiti,
Hatem Hajri, Yann Cabanes, Thomas Gerald, Paul Chauchat, Christian Shewmake, Daniel Brooks,
Bernhard Kainz, Claire Donnat, Susan Holmes and Xavier Pennec.
Geomstats:  A Python Package for Riemannian Geometry in Machine Learning,
Journal of Machine Learning Research, 2020, volume 21, number 223, pages 1-9,
http://jmlr.org/papers/v21/19-027.html, https://github.com/geomstats/geomstats/
"""
HAS_TORCH = ...
if not HAS_TORCH:
    class PyTorchBackend:
        def __init__(self) -> None:
            ...
        
    
    
else:
    class PyTorchBackend:
        """Class for the PyTorch  backend."""
        def __init__(self) -> None:
            ...
        
        @staticmethod
        def all(x, axis=...):
            ...
        
        def array(self, val, dtype=...):
            ...
        
        @staticmethod
        def belongs_to_backend(x): # -> bool:
            ...
        
        def cast(self, x, dtype):
            ...
        
        @staticmethod
        def cdist(x, y, metric=..., p=...):
            ...
        
        @staticmethod
        def copy(x):
            ...
        
        @staticmethod
        def from_numpy(x):
            ...
        
        @staticmethod
        def iscomplex(x): # -> Literal[True]:
            ...
        
        @staticmethod
        def is_float(x): # -> Literal[True]:
            ...
        
        @staticmethod
        def is_float32(x): # -> bool:
            ...
        
        @staticmethod
        def is_float64(x): # -> bool:
            ...
        
        @staticmethod
        def ndim(x):
            ...
        
        @staticmethod
        def pairwise_distances(X, Y=..., metric=...):
            ...
        
        @staticmethod
        def pdist(x, metric=..., p=...):
            ...
        
        def shape(self, data): # -> tuple[Any, ...]:
            ...
        
        def sqrt(self, x, out=...):
            ...
        
        @staticmethod
        def to_numpy(x):
            ...
        
        @staticmethod
        def tril(mat, k=...):
            ...
        
        @staticmethod
        def tril_indices(n, k=..., m=...): # -> tuple[Any, Any]:
            ...
        
        @staticmethod
        def triu(mat, k=...):
            ...
        
        @staticmethod
        def triu_indices(n, k=..., m=...): # -> tuple[Any, Any]:
            ...
        
    
    
    class PyTorchLinalg:
        def __init__(self) -> None:
            ...
        
    
    
    class PyTorchRandom:
        def __init__(self) -> None:
            ...
        
        @staticmethod
        def normal(loc=..., scale=..., size=...):
            ...
        
        @staticmethod
        def uniform(low=..., high=..., size=..., dtype=...):
            ...
        
    
    
    class PyTorchTesting:
        def __init__(self) -> None:
            ...
        
    
    
